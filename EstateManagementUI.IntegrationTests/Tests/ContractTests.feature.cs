// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagementUI.IntegrationTests.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Contract Tests")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    [NUnit.Framework.CategoryAttribute("uigeneral")]
    public partial class ContractTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared",
                "uigeneral"};
        
#line 1 "ContractTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Contract Tests", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Role Name"});
            table1.AddRow(new string[] {
                        "Estate"});
#line 6
 await testRunner.GivenAsync("I create the following roles", ((string)(null)), table1, "Given ");
#line hidden
            global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table2.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table2.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST Scope",
                        "Scope for Transaction Processor REST"});
            table2.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST Scope",
                        "Scope for File Processor REST"});
#line 10
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table2, "Given ");
#line hidden
            global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table3.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "merchantId,estateId,role"});
            table3.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        "merchantId,estateId,role"});
            table3.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST",
                        "Secret1",
                        "fileProcessor",
                        "merchantId,estateId,role"});
#line 16
 await testRunner.GivenAsync("I create the following api resources", ((string)(null)), table3, "Given ");
#line hidden
            global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description",
                        "UserClaims"});
            table4.AddRow(new string[] {
                        "openid",
                        "Your user identifier",
                        "",
                        "sub"});
            table4.AddRow(new string[] {
                        "profile",
                        "User profile",
                        "Your user profile information (first name, last name, etc.)",
                        "name,role,email,given_name,middle_name,family_name,estateId,merchantId"});
            table4.AddRow(new string[] {
                        "email",
                        "Email",
                        "Email and Email Verified Flags",
                        "email_verified,email"});
#line 22
 await testRunner.GivenAsync("I create the following identity resources", ((string)(null)), table4, "Given ");
#line hidden
            global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                        "ClientId",
                        "Name",
                        "Secret",
                        "Scopes",
                        "GrantTypes",
                        "RedirectUris",
                        "PostLogoutRedirectUris",
                        "RequireConsent",
                        "AllowOfflineAccess",
                        "ClientUri"});
            table5.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor",
                        "client_credentials",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "estateUIClient",
                        "Merchant Client",
                        "Secret1",
                        "estateManagement,fileProcessor,transactionProcessor,openid,email,profile",
                        "hybrid",
                        "https://localhost:[port]/signin-oidc",
                        "https://localhost:[port]/signout-oidc",
                        "false",
                        "true",
                        "https://[url]:[port]"});
#line 28
 await testRunner.GivenAsync("I create the following clients", ((string)(null)), table5, "Given ");
#line hidden
            global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                        "ClientId"});
            table6.AddRow(new string[] {
                        "serviceClient"});
#line 33
 await testRunner.GivenAsync("I have a token to access the estate management resource", ((string)(null)), table6, "Given ");
#line hidden
            global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                        "EstateName"});
            table7.AddRow(new string[] {
                        "Test Estate"});
#line 37
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table7, "Given ");
#line hidden
            global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table8.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1",
                        "True",
                        "True"});
            table8.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2",
                        "True",
                        "False"});
            table8.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 3",
                        "False",
                        "True"});
#line 41
 await testRunner.AndAsync("I have created the following operators", ((string)(null)), table8, "And ");
#line hidden
            global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table9.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1"});
            table9.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2"});
            table9.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 3"});
#line 47
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table9, "And ");
#line hidden
            global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "EstateName"});
            table10.AddRow(new string[] {
                        "estateuser@testestate1.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate"});
#line 53
 await testRunner.AndAsync("I have created the following security users", ((string)(null)), table10, "And ");
#line hidden
            global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table11.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1",
                        "Operator 1 Contract"});
            table11.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2",
                        "Operator 2 Contract"});
#line 57
 await testRunner.GivenAsync("I have created the following contracts", ((string)(null)), table11, "Given ");
#line hidden
            global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "DisplayText",
                        "Value",
                        "ProductType"});
            table12.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1",
                        "Operator 1 Contract",
                        "100 KES Topup",
                        "100 KES",
                        "100.00",
                        "MobileTopup"});
            table12.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1",
                        "Operator 1 Contract",
                        "Variable Topup 1",
                        "Custom",
                        "",
                        "MobileTopup"});
            table12.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2",
                        "Operator 2 Contract",
                        "200 KES Topup",
                        "200 KES",
                        "500.00",
                        "MobileTopup"});
            table12.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2",
                        "Operator 2 Contract",
                        "500 KES Topup",
                        "500 KES",
                        "500.00",
                        "MobileTopup"});
            table12.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2",
                        "Operator 2 Contract",
                        "Variable Topup 1",
                        "Custom",
                        "",
                        "MobileTopup"});
#line 62
 await testRunner.GivenAsync("I have created the following contract products", ((string)(null)), table12, "Given ");
#line hidden
#line 70
 await testRunner.GivenAsync("I am on the application home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
 await testRunner.AndAsync("I click on the Sign In Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
 await testRunner.ThenAsync("I am presented with a login screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
 await testRunner.WhenAsync("I login with the username \'estateuser@testestate1.co.uk\' and password \'123456\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
 await testRunner.ThenAsync("I am presented with the Estate Administrator Dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Contract PR Test")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task ContractPRTest()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Contract PR Test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 83
 await testRunner.GivenAsync("I click on the My Contracts sidebar option", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 84
 await testRunner.ThenAsync("I am presented with the Contracts List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "OperatorName",
                            "Products"});
                table13.AddRow(new string[] {
                            "Operator 1 Contract",
                            "Test Operator 1",
                            "2"});
                table13.AddRow(new string[] {
                            "Operator 2 Contract",
                            "Test Operator 2",
                            "3"});
#line 85
 await testRunner.AndAsync("the following contract details are in the list", ((string)(null)), table13, "And ");
#line hidden
#line 89
 await testRunner.WhenAsync("I click on the New Contract Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 90
 await testRunner.ThenAsync("the New Contract Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "OperatorName"});
                table14.AddRow(new string[] {
                            "Operator 3 Contract",
                            "Test Operator 3"});
#line 91
 await testRunner.WhenAsync("I enter the following details for the new Contract", ((string)(null)), table14, "When ");
#line hidden
#line 94
 await testRunner.WhenAsync("I click the Save Contract Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 95
 await testRunner.ThenAsync("I am presented with the Contracts List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "OperatorName",
                            "Products"});
                table15.AddRow(new string[] {
                            "Operator 1 Contract",
                            "Test Operator 1",
                            "2"});
                table15.AddRow(new string[] {
                            "Operator 2 Contract",
                            "Test Operator 2",
                            "3"});
                table15.AddRow(new string[] {
                            "Operator 3 Contract",
                            "Test Operator 3",
                            "0"});
#line 96
 await testRunner.AndAsync("the following contract details are in the list", ((string)(null)), table15, "And ");
#line hidden
#line 101
 await testRunner.WhenAsync("I click on the View Products Button for \'Operator 1 Contract\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 102
 await testRunner.ThenAsync("the Contract Products List Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "ProductName",
                            "DisplayText",
                            "Value",
                            "ProductType"});
                table16.AddRow(new string[] {
                            "100 KES Topup",
                            "100 KES",
                            "100.00",
                            "MobileTopup"});
                table16.AddRow(new string[] {
                            "Variable Topup 1",
                            "Custom",
                            "Variable",
                            "MobileTopup"});
#line 103
 await testRunner.AndAsync("the following contract product details are in the list", ((string)(null)), table16, "And ");
#line hidden
#line 107
 await testRunner.WhenAsync("I click on the New Contract Product Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 108
 await testRunner.ThenAsync("the New Product Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "ProductName",
                            "DisplayText",
                            "Value",
                            "ProductType"});
                table17.AddRow(new string[] {
                            "200 KES Topup",
                            "200 KES",
                            "200.00",
                            "Mobile Topup"});
#line 109
 await testRunner.WhenAsync("I enter the following details for the new Product", ((string)(null)), table17, "When ");
#line hidden
#line 112
 await testRunner.WhenAsync("I click the Save Product Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 113
 await testRunner.ThenAsync("the Contract Products List Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "ProductName",
                            "DisplayText",
                            "Value",
                            "ProductType"});
                table18.AddRow(new string[] {
                            "100 KES Topup",
                            "100 KES",
                            "100.00",
                            "MobileTopup"});
                table18.AddRow(new string[] {
                            "200 KES Topup",
                            "200 KES",
                            "200.00",
                            "MobileTopup"});
                table18.AddRow(new string[] {
                            "Variable Topup 1",
                            "Custom",
                            "Variable",
                            "MobileTopup"});
#line 114
 await testRunner.AndAsync("the following contract product details are in the list", ((string)(null)), table18, "And ");
#line hidden
#line 119
 await testRunner.WhenAsync("I click on the View Fees Button for \'100 KES Topup\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 120
 await testRunner.ThenAsync("the Contract Products Transaction Fees List Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 121
 await testRunner.WhenAsync("I click on the New Contract Product Transaction Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 122
 await testRunner.ThenAsync("the New Contract Product Transaction Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "CalculationType",
                            "FeeType",
                            "Value"});
                table19.AddRow(new string[] {
                            "Test Fixed Fee",
                            "Fixed Value",
                            "Merchant",
                            "0.25"});
#line 123
 await testRunner.WhenAsync("I enter the following details for the new Transaction Fee", ((string)(null)), table19, "When ");
#line hidden
#line 126
 await testRunner.WhenAsync("I click the Save Transaction Fee Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 127
 await testRunner.ThenAsync("the Contract Products Transaction Fees List Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

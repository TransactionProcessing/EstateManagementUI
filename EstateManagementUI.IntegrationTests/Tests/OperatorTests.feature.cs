// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagementUI.IntegrationTests.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Operator Tests")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    [NUnit.Framework.CategoryAttribute("uigeneral")]
    public partial class OperatorTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared",
                "uigeneral"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Operator Tests", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "OperatorTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table70 = new global::Reqnroll.Table(new string[] {
                        "Role Name"});
            table70.AddRow(new string[] {
                        "Estate"});
#line 6
 await testRunner.GivenAsync("I create the following roles", ((string)(null)), table70, "Given ");
#line hidden
            global::Reqnroll.Table table71 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table71.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table71.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST Scope",
                        "Scope for Transaction Processor REST"});
            table71.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST Scope",
                        "Scope for File Processor REST"});
#line 10
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table71, "Given ");
#line hidden
            global::Reqnroll.Table table72 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table72.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "merchantId,estateId,role"});
            table72.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        "merchantId,estateId,role"});
            table72.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST",
                        "Secret1",
                        "fileProcessor",
                        "merchantId,estateId,role"});
#line 16
 await testRunner.GivenAsync("I create the following api resources", ((string)(null)), table72, "Given ");
#line hidden
            global::Reqnroll.Table table73 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description",
                        "UserClaims"});
            table73.AddRow(new string[] {
                        "openid",
                        "Your user identifier",
                        "",
                        "sub"});
            table73.AddRow(new string[] {
                        "profile",
                        "User profile",
                        "Your user profile information (first name, last name, etc.)",
                        "name,role,email,given_name,middle_name,family_name,estateId,merchantId"});
            table73.AddRow(new string[] {
                        "email",
                        "Email",
                        "Email and Email Verified Flags",
                        "email_verified,email"});
#line 22
 await testRunner.GivenAsync("I create the following identity resources", ((string)(null)), table73, "Given ");
#line hidden
            global::Reqnroll.Table table74 = new global::Reqnroll.Table(new string[] {
                        "ClientId",
                        "Name",
                        "Secret",
                        "Scopes",
                        "GrantTypes",
                        "RedirectUris",
                        "PostLogoutRedirectUris",
                        "RequireConsent",
                        "AllowOfflineAccess",
                        "ClientUri"});
            table74.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor",
                        "client_credentials",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table74.AddRow(new string[] {
                        "estateUIClient",
                        "Merchant Client",
                        "Secret1",
                        "estateManagement,fileProcessor,transactionProcessor,openid,email,profile",
                        "hybrid",
                        "https://localhost:[port]/signin-oidc",
                        "https://localhost:[port]/signout-oidc",
                        "false",
                        "true",
                        "https://[url]:[port]"});
#line 28
 await testRunner.GivenAsync("I create the following clients", ((string)(null)), table74, "Given ");
#line hidden
            global::Reqnroll.Table table75 = new global::Reqnroll.Table(new string[] {
                        "ClientId"});
            table75.AddRow(new string[] {
                        "serviceClient"});
#line 33
 await testRunner.GivenAsync("I have a token to access the estate management resource", ((string)(null)), table75, "Given ");
#line hidden
            global::Reqnroll.Table table76 = new global::Reqnroll.Table(new string[] {
                        "EstateName"});
            table76.AddRow(new string[] {
                        "Test Estate"});
#line 37
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table76, "Given ");
#line hidden
            global::Reqnroll.Table table77 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table77.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1",
                        "True",
                        "True"});
            table77.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2",
                        "True",
                        "False"});
            table77.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 3",
                        "False",
                        "True"});
#line 41
 await testRunner.AndAsync("I have created the following operators", ((string)(null)), table77, "And ");
#line hidden
            global::Reqnroll.Table table78 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table78.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 1"});
            table78.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 2"});
            table78.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator 3"});
#line 47
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table78, "And ");
#line hidden
            global::Reqnroll.Table table79 = new global::Reqnroll.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "EstateName"});
            table79.AddRow(new string[] {
                        "estateuser@testestate1.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate"});
#line 53
 await testRunner.AndAsync("I have created the following security users", ((string)(null)), table79, "And ");
#line hidden
#line 57
 await testRunner.GivenAsync("I am on the application home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
 await testRunner.AndAsync("I click on the Sign In Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.ThenAsync("I am presented with a login screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
 await testRunner.WhenAsync("I login with the username \'estateuser@testestate1.co.uk\' and password \'123456\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
 await testRunner.ThenAsync("I am presented with the Estate Administrator Dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator PR Test")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task OperatorPRTest()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Operator PR Test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 70
 await testRunner.GivenAsync("I click on the My Operators sidebar option", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 71
 await testRunner.ThenAsync("I am presented with the Operators List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table80 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table80.AddRow(new string[] {
                            "Test Operator 1",
                            "Yes",
                            "Yes"});
                table80.AddRow(new string[] {
                            "Test Operator 2",
                            "Yes",
                            "No"});
                table80.AddRow(new string[] {
                            "Test Operator 3",
                            "No",
                            "Yes"});
#line 72
 await testRunner.AndAsync("the following operator details are in the list", ((string)(null)), table80, "And ");
#line hidden
#line 77
 await testRunner.WhenAsync("I click on the New Operator Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
 await testRunner.ThenAsync("the Add New Operator Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table81 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table81.AddRow(new string[] {
                            "Test Operator 4",
                            "Yes",
                            "Yes"});
#line 79
 await testRunner.WhenAsync("I enter the following details for the new Operator", ((string)(null)), table81, "When ");
#line hidden
#line 82
 await testRunner.AndAsync("click the Save Operator button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
 await testRunner.ThenAsync("I am presented with the Operators List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table82 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table82.AddRow(new string[] {
                            "Test Operator 1",
                            "Yes",
                            "Yes"});
                table82.AddRow(new string[] {
                            "Test Operator 2",
                            "Yes",
                            "No"});
                table82.AddRow(new string[] {
                            "Test Operator 3",
                            "No",
                            "Yes"});
                table82.AddRow(new string[] {
                            "Test Operator 4",
                            "Yes",
                            "Yes"});
#line 84
 await testRunner.AndAsync("the following operator details are in the list", ((string)(null)), table82, "And ");
#line hidden
#line 90
 await testRunner.WhenAsync("I click on the Edit Operator Button for \'Test Operator 1\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 91
 await testRunner.ThenAsync("the Edit Operator Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table83 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table83.AddRow(new string[] {
                            "Test Operator 1 update",
                            "No",
                            "No"});
#line 92
 await testRunner.WhenAsync("I enter the following new details for the Operator", ((string)(null)), table83, "When ");
#line hidden
#line 95
 await testRunner.AndAsync("click the Save Operator button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
 await testRunner.ThenAsync("I am presented with the Operators List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table84 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table84.AddRow(new string[] {
                            "Test Operator 1 update",
                            "No",
                            "No"});
                table84.AddRow(new string[] {
                            "Test Operator 2",
                            "Yes",
                            "No"});
                table84.AddRow(new string[] {
                            "Test Operator 3",
                            "No",
                            "Yes"});
                table84.AddRow(new string[] {
                            "Test Operator 4",
                            "Yes",
                            "Yes"});
#line 97
 await testRunner.AndAsync("the following operator details are in the list", ((string)(null)), table84, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

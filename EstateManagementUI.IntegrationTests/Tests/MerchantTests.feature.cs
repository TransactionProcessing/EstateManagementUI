// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagementUI.IntegrationTests.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Merchant Tests")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    [NUnit.Framework.CategoryAttribute("uigeneral")]
    public partial class MerchantTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared",
                "uigeneral"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Merchant Tests", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "MerchantTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                        "Role Name"});
            table31.AddRow(new string[] {
                        "Estate"});
            table31.AddRow(new string[] {
                        "Merchant"});
#line 6
 await testRunner.GivenAsync("I create the following roles", ((string)(null)), table31, "Given ");
#line hidden
            global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table32.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table32.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST Scope",
                        "Scope for Transaction Processor REST"});
            table32.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST Scope",
                        "Scope for File Processor REST"});
#line 11
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table32, "Given ");
#line hidden
            global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table33.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "merchantId,estateId,role"});
            table33.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        "merchantId,estateId,role"});
            table33.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST",
                        "Secret1",
                        "fileProcessor",
                        "merchantId,estateId,role"});
#line 17
 await testRunner.GivenAsync("I create the following api resources", ((string)(null)), table33, "Given ");
#line hidden
            global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description",
                        "UserClaims"});
            table34.AddRow(new string[] {
                        "openid",
                        "Your user identifier",
                        "",
                        "sub"});
            table34.AddRow(new string[] {
                        "profile",
                        "User profile",
                        "Your user profile information (first name, last name, etc.)",
                        "name,role,email,given_name,middle_name,family_name,estateId,merchantId"});
            table34.AddRow(new string[] {
                        "email",
                        "Email",
                        "Email and Email Verified Flags",
                        "email_verified,email"});
#line 23
 await testRunner.GivenAsync("I create the following identity resources", ((string)(null)), table34, "Given ");
#line hidden
            global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                        "ClientId",
                        "Name",
                        "Secret",
                        "Scopes",
                        "GrantTypes",
                        "RedirectUris",
                        "PostLogoutRedirectUris",
                        "RequireConsent",
                        "AllowOfflineAccess",
                        "ClientUri"});
            table35.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor",
                        "client_credentials",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "estateUIClient",
                        "Merchant Client",
                        "Secret1",
                        "estateManagement,fileProcessor,transactionProcessor,openid,email,profile",
                        "hybrid",
                        "https://localhost:[port]/signin-oidc",
                        "https://localhost:[port]/signout-oidc",
                        "false",
                        "true",
                        "https://[url]:[port]"});
#line 29
 await testRunner.GivenAsync("I create the following clients", ((string)(null)), table35, "Given ");
#line hidden
            global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                        "ClientId"});
            table36.AddRow(new string[] {
                        "serviceClient"});
#line 34
 await testRunner.GivenAsync("I have a token to access the estate management resource", ((string)(null)), table36, "Given ");
#line hidden
            global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                        "EstateName"});
            table37.AddRow(new string[] {
                        "Test Estate"});
#line 38
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table37, "Given ");
#line hidden
            global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table38.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator",
                        "True",
                        "True"});
#line 42
 await testRunner.AndAsync("I have created the following operators", ((string)(null)), table38, "And ");
#line hidden
            global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table39.AddRow(new string[] {
                        "Test Estate",
                        "Test Operator"});
#line 46
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table39, "And ");
#line hidden
            global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "EstateName"});
            table40.AddRow(new string[] {
                        "estateuser@testestate1.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate"});
#line 50
 await testRunner.AndAsync("I have created the following security users", ((string)(null)), table40, "And ");
#line hidden
            global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                        "MerchantName",
                        "SettlementSchedule",
                        "AddressLine1",
                        "Town",
                        "Region",
                        "Country",
                        "ContactName",
                        "EmailAddress",
                        "EstateName"});
            table41.AddRow(new string[] {
                        "Test Merchant 1",
                        "Immediate",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant1.co.uk",
                        "Test Estate"});
            table41.AddRow(new string[] {
                        "Test Merchant 2",
                        "Weekly",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant2.co.uk",
                        "Test Estate"});
            table41.AddRow(new string[] {
                        "Test Merchant 3",
                        "Monthly",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant3.co.uk",
                        "Test Estate"});
#line 54
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table41, "Given ");
#line hidden
            global::Reqnroll.Table table42 = new global::Reqnroll.Table(new string[] {
                        "OperatorName",
                        "MerchantName",
                        "MerchantNumber",
                        "TerminalNumber",
                        "EstateName"});
            table42.AddRow(new string[] {
                        "Test Operator",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate"});
            table42.AddRow(new string[] {
                        "Test Operator",
                        "Test Merchant 2",
                        "00000001",
                        "10000001",
                        "Test Estate"});
            table42.AddRow(new string[] {
                        "Test Operator",
                        "Test Merchant 3",
                        "00000001",
                        "10000001",
                        "Test Estate"});
#line 60
 await testRunner.WhenAsync("I assign the following  operator to the merchants", ((string)(null)), table42, "When ");
#line hidden
            global::Reqnroll.Table table43 = new global::Reqnroll.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "MerchantName",
                        "EstateName"});
            table43.AddRow(new string[] {
                        "merchantuser1@testmerchant1.co.uk",
                        "123456",
                        "TestMerchant",
                        "User1",
                        "Test Merchant 1",
                        "Test Estate"});
            table43.AddRow(new string[] {
                        "merchantuser1@testmerchant2.co.uk",
                        "123456",
                        "TestMerchant",
                        "User1",
                        "Test Merchant 2",
                        "Test Estate"});
            table43.AddRow(new string[] {
                        "merchantuser1@testmerchant3.co.uk",
                        "123456",
                        "TestMerchant",
                        "User1",
                        "Test Merchant 3",
                        "Test Estate"});
#line 66
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table43, "When ");
#line hidden
            global::Reqnroll.Table table44 = new global::Reqnroll.Table(new string[] {
                        "DeviceIdentifier",
                        "MerchantName",
                        "EstateName"});
            table44.AddRow(new string[] {
                        "TestDevice1",
                        "Test Merchant 1",
                        "Test Estate"});
            table44.AddRow(new string[] {
                        "TestDevice2",
                        "Test Merchant 2",
                        "Test Estate"});
#line 72
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table44, "When ");
#line hidden
#line 77
 await testRunner.GivenAsync("I am on the application home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
 await testRunner.AndAsync("I click on the Sign In Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
 await testRunner.ThenAsync("I am presented with a login screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 83
 await testRunner.WhenAsync("I login with the username \'estateuser@testestate1.co.uk\' and password \'123456\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 85
 await testRunner.ThenAsync("I am presented with the Estate Administrator Dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Merchant PR Test")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task MerchantPRTest()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Merchant PR Test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 90
 await testRunner.GivenAsync("I click on the My Merchants sidebar option", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 91
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table45 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "ContactName",
                            "AddressLine1",
                            "Town"});
                table45.AddRow(new string[] {
                            "Test Merchant 1",
                            "Immediate",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table45.AddRow(new string[] {
                            "Test Merchant 2",
                            "Weekly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table45.AddRow(new string[] {
                            "Test Merchant 3",
                            "Monthly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
#line 92
 await testRunner.AndAsync("the following merchants details are in the list", ((string)(null)), table45, "And ");
#line hidden
#line 97
 await testRunner.WhenAsync("I click on the New Merchant Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
 await testRunner.ThenAsync("the Add New Merchant Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table46 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress"});
                table46.AddRow(new string[] {
                            "Test Merchant 4",
                            "Immediate",
                            "Address Line 1",
                            "TestTown",
                            "Region",
                            "Country",
                            "Test Contact 4",
                            "1@2.com"});
#line 99
 await testRunner.WhenAsync("I enter the following details for the new Merchant", ((string)(null)), table46, "When ");
#line hidden
#line 102
 await testRunner.AndAsync("click the Save Merchant button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 103
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table47 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "ContactName",
                            "AddressLine1",
                            "Town"});
                table47.AddRow(new string[] {
                            "Test Merchant 1",
                            "Immediate",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table47.AddRow(new string[] {
                            "Test Merchant 2",
                            "Weekly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table47.AddRow(new string[] {
                            "Test Merchant 3",
                            "Monthly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table47.AddRow(new string[] {
                            "Test Merchant 4",
                            "Immediate",
                            "Test Contact 4",
                            "Address Line 1",
                            "TestTown"});
#line 104
 await testRunner.AndAsync("the following merchants details are in the list", ((string)(null)), table47, "And ");
#line hidden
#line 110
 await testRunner.WhenAsync("I click on the Edit Merchant Button for \'Test Merchant 1\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 111
 await testRunner.ThenAsync("the Edit Merchant Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table48 = new global::Reqnroll.Table(new string[] {
                            "Tab",
                            "Field",
                            "Value"});
                table48.AddRow(new string[] {
                            "Details",
                            "Name",
                            "Test Merchant 1 Update"});
                table48.AddRow(new string[] {
                            "Address",
                            "AddressLine1",
                            "Address Line 1 Update"});
                table48.AddRow(new string[] {
                            "Contact",
                            "ContactName",
                            "Test Contact 1 Update"});
#line 112
 await testRunner.WhenAsync("I enter the following details for the updated Merchant", ((string)(null)), table48, "When ");
#line hidden
#line 117
 await testRunner.AndAsync("click the Save Merchant button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 118
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table49 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "ContactName",
                            "AddressLine1",
                            "Town"});
                table49.AddRow(new string[] {
                            "Test Merchant 1 Update",
                            "Immediate",
                            "Test Contact 1 Update",
                            "Address Line 1 Update",
                            "TestTown"});
                table49.AddRow(new string[] {
                            "Test Merchant 2",
                            "Weekly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table49.AddRow(new string[] {
                            "Test Merchant 3",
                            "Monthly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table49.AddRow(new string[] {
                            "Test Merchant 4",
                            "Immediate",
                            "Test Contact 4",
                            "Address Line 1",
                            "TestTown"});
#line 119
 await testRunner.AndAsync("the following merchants details are in the list", ((string)(null)), table49, "And ");
#line hidden
#line 125
 await testRunner.WhenAsync("I click on the Make Deposit Button for \'Test Merchant 1 Update\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 126
 await testRunner.ThenAsync("the Make Deposit Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table50 = new global::Reqnroll.Table(new string[] {
                            "Amount",
                            "Date",
                            "Reference"});
                table50.AddRow(new string[] {
                            "1000.00",
                            "Today",
                            "Test Deposit 1"});
#line 127
 await testRunner.WhenAsync("I enter the following details for the deposit", ((string)(null)), table50, "When ");
#line hidden
#line 130
 await testRunner.AndAsync("click the Make Deposit button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 131
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 132
 await testRunner.WhenAsync("I click on the View Merchant Button for \'Test Merchant 1 Update\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 133
 await testRunner.ThenAsync("the View Merchant Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Merchant Operator Management")]
        public async System.Threading.Tasks.Task MerchantOperatorManagement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Merchant Operator Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table51 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table51.AddRow(new string[] {
                            "Test Estate",
                            "Test Operator1",
                            "True",
                            "True"});
#line 137
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table51, "Given ");
#line hidden
                global::Reqnroll.Table table52 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName"});
                table52.AddRow(new string[] {
                            "Test Estate",
                            "Test Operator1"});
#line 141
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table52, "And ");
#line hidden
#line 145
 await testRunner.GivenAsync("I click on the My Merchants sidebar option", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 146
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table53 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "ContactName",
                            "AddressLine1",
                            "Town"});
                table53.AddRow(new string[] {
                            "Test Merchant 1",
                            "Immediate",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table53.AddRow(new string[] {
                            "Test Merchant 2",
                            "Weekly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table53.AddRow(new string[] {
                            "Test Merchant 3",
                            "Monthly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
#line 147
 await testRunner.AndAsync("the following merchants details are in the list", ((string)(null)), table53, "And ");
#line hidden
#line 153
 await testRunner.WhenAsync("I click on the Edit Merchant Button for \'Test Merchant 1\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 154
 await testRunner.ThenAsync("the Edit Merchant Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 156
 await testRunner.WhenAsync("I click on the Operators tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 157
 await testRunner.ThenAsync("I am presented with the Merchants Operator List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table54 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantNumber",
                            "TerminalNumber"});
                table54.AddRow(new string[] {
                            "Test Operator",
                            "00000001",
                            "10000001"});
#line 158
 await testRunner.AndAsync("the following operators are displayed in the list", ((string)(null)), table54, "And ");
#line hidden
#line 161
 await testRunner.WhenAsync("I click on the Add Operator Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 162
 await testRunner.ThenAsync("the Assign Operator Dialog will be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table55 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantNumber",
                            "TerminalNumber"});
                table55.AddRow(new string[] {
                            "Test Operator1",
                            "00000111",
                            "10000111"});
#line 163
 await testRunner.WhenAsync("I enter the following details for the Operator", ((string)(null)), table55, "When ");
#line hidden
#line 166
 await testRunner.AndAsync("click the Assign Operator button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 167
 await testRunner.ThenAsync("I am presented with the Merchants Operator List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table56 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "IsDeleted"});
                table56.AddRow(new string[] {
                            "Test Operator",
                            "00000001",
                            "10000001",
                            "False"});
                table56.AddRow(new string[] {
                            "Test Operator1",
                            "00000111",
                            "10000111",
                            "False"});
#line 168
 await testRunner.AndAsync("the following operators are displayed in the list", ((string)(null)), table56, "And ");
#line hidden
#line 172
 await testRunner.WhenAsync("I click on the Remove Operator for \'Test Operator1\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 173
 await testRunner.ThenAsync("I am presented with the Merchants Operator List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table57 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "IsDeleted"});
                table57.AddRow(new string[] {
                            "Test Operator",
                            "00000001",
                            "10000001",
                            "False"});
                table57.AddRow(new string[] {
                            "Test Operator1",
                            "00000111",
                            "10000111",
                            "True"});
#line 174
 await testRunner.AndAsync("the following operators are displayed in the list", ((string)(null)), table57, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Merchant Contract Management")]
        public async System.Threading.Tasks.Task MerchantContractManagement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Merchant Contract Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table58 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table58.AddRow(new string[] {
                            "Test Estate",
                            "Test Operator1",
                            "True",
                            "True"});
#line 180
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table58, "Given ");
#line hidden
                global::Reqnroll.Table table59 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName"});
                table59.AddRow(new string[] {
                            "Test Estate",
                            "Test Operator1"});
#line 184
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table59, "And ");
#line hidden
                global::Reqnroll.Table table60 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "ContractDescription"});
                table60.AddRow(new string[] {
                            "Test Estate",
                            "Test Operator1",
                            "Operator 1 Contract"});
#line 189
 await testRunner.GivenAsync("I have created the following contracts", ((string)(null)), table60, "Given ");
#line hidden
#line 193
 await testRunner.GivenAsync("I click on the My Merchants sidebar option", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 194
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table61 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "ContactName",
                            "AddressLine1",
                            "Town"});
                table61.AddRow(new string[] {
                            "Test Merchant 1",
                            "Immediate",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table61.AddRow(new string[] {
                            "Test Merchant 2",
                            "Weekly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table61.AddRow(new string[] {
                            "Test Merchant 3",
                            "Monthly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
#line 195
 await testRunner.AndAsync("the following merchants details are in the list", ((string)(null)), table61, "And ");
#line hidden
#line 201
 await testRunner.WhenAsync("I click on the Edit Merchant Button for \'Test Merchant 1\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 202
 await testRunner.ThenAsync("the Edit Merchant Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 204
 await testRunner.WhenAsync("I click on the Contracts tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 205
 await testRunner.ThenAsync("I am presented with the Merchants Contract List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table62 = new global::Reqnroll.Table(new string[] {
                            "ContractName",
                            "IsDeleted"});
#line 206
 await testRunner.AndAsync("the following contracts are displayed in the list", ((string)(null)), table62, "And ");
#line hidden
#line 209
 await testRunner.WhenAsync("I click on the Add Contract Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 210
 await testRunner.ThenAsync("the Assign Contract Dialog will be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table63 = new global::Reqnroll.Table(new string[] {
                            "ContractName"});
                table63.AddRow(new string[] {
                            "Operator 1 Contract"});
#line 211
 await testRunner.WhenAsync("I enter the following details for the Contract", ((string)(null)), table63, "When ");
#line hidden
#line 214
 await testRunner.AndAsync("click the Assign Contract button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 215
 await testRunner.ThenAsync("I am presented with the Merchants Contract List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table64 = new global::Reqnroll.Table(new string[] {
                            "ContractName",
                            "IsDeleted"});
                table64.AddRow(new string[] {
                            "Operator 1 Contract",
                            "False"});
#line 216
 await testRunner.AndAsync("the following contracts are displayed in the list", ((string)(null)), table64, "And ");
#line hidden
#line 220
 await testRunner.WhenAsync("I click on the Remove Contract for \'Operator 1 Contract\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 221
 await testRunner.ThenAsync("I am presented with the Merchants Contract List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table65 = new global::Reqnroll.Table(new string[] {
                            "ContractName",
                            "IsDeleted"});
                table65.AddRow(new string[] {
                            "Operator 1 Contract",
                            "True"});
#line 222
 await testRunner.AndAsync("the following contracts are displayed in the list", ((string)(null)), table65, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Merchant Device Management")]
        public async System.Threading.Tasks.Task MerchantDeviceManagement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Merchant Device Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 229
 await testRunner.GivenAsync("I click on the My Merchants sidebar option", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 230
 await testRunner.ThenAsync("I am presented with the Merchants List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table66 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "SettlementSchedule",
                            "ContactName",
                            "AddressLine1",
                            "Town"});
                table66.AddRow(new string[] {
                            "Test Merchant 1",
                            "Immediate",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table66.AddRow(new string[] {
                            "Test Merchant 2",
                            "Weekly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
                table66.AddRow(new string[] {
                            "Test Merchant 3",
                            "Monthly",
                            "Test Contact 1",
                            "Address Line 1",
                            "TestTown"});
#line 231
 await testRunner.AndAsync("the following merchants details are in the list", ((string)(null)), table66, "And ");
#line hidden
#line 237
 await testRunner.WhenAsync("I click on the Edit Merchant Button for \'Test Merchant 3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 238
 await testRunner.ThenAsync("the Edit Merchant Screen is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 240
 await testRunner.WhenAsync("I click on the Devices tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 241
 await testRunner.ThenAsync("I am presented with the Merchants Device List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table67 = new global::Reqnroll.Table(new string[] {
                            "DeviceIdentifier"});
#line 242
 await testRunner.AndAsync("the following devices are displayed in the list", ((string)(null)), table67, "And ");
#line hidden
#line 245
 await testRunner.WhenAsync("I click on the Add Device Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 246
 await testRunner.ThenAsync("the Add Device Dialog will be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table68 = new global::Reqnroll.Table(new string[] {
                            "MerchantDevice"});
                table68.AddRow(new string[] {
                            "123456ABCDEF"});
#line 247
 await testRunner.WhenAsync("I enter the following details for the Device", ((string)(null)), table68, "When ");
#line hidden
#line 250
 await testRunner.AndAsync("click the Add Device button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 251
 await testRunner.ThenAsync("I am presented with the Merchants Device List Screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table69 = new global::Reqnroll.Table(new string[] {
                            "DeviceIdentifier"});
                table69.AddRow(new string[] {
                            "123456ABCDEF"});
#line 252
 await testRunner.AndAsync("the following devices are displayed in the list", ((string)(null)), table69, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
